import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)

load_dotenv()
TOKEN = os.getenv("TOKEN")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
(
    START, OFFICE, CUISINE, ALLERGIES, DIVERSITY, LUNCH_DURATION, LUNCH_TYPE, BUDGET
) = range(8)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def create_reply_keyboard(options):
    return ReplyKeyboardMarkup(
        [[option] for option in options], resize_keyboard=True, one_time_keyboard=True
    )

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
office_options = ["–ø–µ—Ä. –í–∏–ª–µ–Ω—Å–∫–∏–π, 14–ê", "–î–µ–≥—Ç—è—Ä–Ω—ã–π –ø–µ—Ä., 11–ë", "–ö–∏–µ–≤—Å–∫–∞—è —É–ª., 5 –∫–æ—Ä–ø. 4"]
cuisine_options = ["–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è", "–Ø–ø–æ–Ω—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–í–µ–≥–∞–Ω—Å–∫–∞—è", "–ù–µ –≤–∞–∂–Ω–æ"]
allergy_options = ["–û—Ä–µ—Ö–∏", "–õ–∞–∫—Ç–æ–∑–∞", "–ì–ª—é—Ç–µ–Ω", "–ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π"]
diversity_options = ["–õ—é–±–ª—é –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", "–ß–∞—â–µ —Ö–æ–∂—É –≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞"]
lunch_duration_options = ["1 —á–∞—Å", "45 –º–∏–Ω", "30 –º–∏–Ω", "20 –º–∏–Ω"]
lunch_type_options = ["–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±–µ–¥", "–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á", "–ü–µ—Ä–µ–∫—É—Å"]
budget_options = ["–¥–æ 500 —Ä—É–±.", "500-1000 —Ä—É–±.", "1000+ —Ä—É–±."]

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –æ–±–µ–¥–∞.\n"
        "–í—ã–±–µ—Ä–∏ –æ—Ñ–∏—Å:",
        reply_markup=create_reply_keyboard(office_options)
    )
    return OFFICE

async def office(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["office"] = update.message.text
    await update.message.reply_text("–ö–∞–∫—É—é –∫—É—Ö–Ω—é –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?", reply_markup=create_reply_keyboard(cuisine_options))
    return CUISINE

async def cuisine(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["cuisine"] = update.message.text
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏–∏?", reply_markup=create_reply_keyboard(allergy_options))
    return ALLERGIES

async def allergies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["allergies"] = update.message.text
    await update.message.reply_text("–¢—ã –ª—é–±–∏—à—å –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞?", reply_markup=create_reply_keyboard(diversity_options))
    return DIVERSITY

async def diversity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["diversity"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –Ω–∞ –æ–±–µ–¥?", reply_markup=create_reply_keyboard(lunch_duration_options))
    return LUNCH_DURATION

async def lunch_duration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["lunch_duration"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –æ–±–µ–¥–∞?", reply_markup=create_reply_keyboard(lunch_type_options))
    return LUNCH_TYPE

async def lunch_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["lunch_type"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç?", reply_markup=create_reply_keyboard(budget_options))
    return BUDGET

async def budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["budget"] = update.message.text
    summary = (
        f"üìç –û—Ñ–∏—Å: {context.user_data.get('office', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üçΩ –ö—É—Ö–Ω—è: {context.user_data.get('cuisine', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚ö† –ê–ª–ª–µ—Ä–≥–∏–∏: {context.user_data.get('allergies', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üåç –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: {context.user_data.get('diversity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚è≥ –í—Ä–µ–º—è –Ω–∞ –æ–±–µ–¥: {context.user_data.get('lunch_duration', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"ü•ó –¢–∏–ø –æ–±–µ–¥–∞: {context.user_data.get('lunch_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {context.user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    )
    await update.message.reply_text(f"üéâ –°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n{summary}", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        OFFICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, office)],
        CUISINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, cuisine)],
        ALLERGIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, allergies)],
        DIVERSITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, diversity)],
        LUNCH_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, lunch_duration)],
        LUNCH_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lunch_type)],
        BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, budget)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app.add_handler(conv_handler)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()
