import os
import logging
import json
import re
import requests
from collections import defaultdict
from typing import Set, Dict, Any
from dotenv import load_dotenv
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

load_dotenv()
TOKEN = os.getenv("TOKEN")

# –ò–º—è –±–æ—Ç–∞ (–±–µ–∑ @)
BOT_USERNAME = "LunchBuddy1Bot"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
def remove_emojis(text: str) -> str:
    emoji_pattern = re.compile(
        "["
        u"\U0001F600-\U0001F64F"  # —ç–º–æ–¥–∑–∏ –ª–∏—Ü–∞
        u"\U0001F300-\U0001F5FF"  # —Å–∏–º–≤–æ–ª—ã –∏ –ø–∏–∫—Ç–æ–≥—Ä–∞–º–º—ã
        u"\U0001F680-\U0001F6FF"  # —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –∫–∞—Ä—Ç—ã
        u"\U0001F1E0-\U0001F1FF"  # —Ñ–ª–∞–≥–∏
        u"\U0001F900-\U0001F9FF"  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏
        "]+", 
        flags=re.UNICODE
    )
    return emoji_pattern.sub("", text).strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
def clean_dict_keys(d: dict) -> dict:
    cleaned = {}
    for key, value in d.items():
        new_key = remove_emojis(key) if isinstance(key, str) else key
        if isinstance(value, dict):
            cleaned[new_key] = clean_dict_keys(value)
        else:
            cleaned[new_key] = value
    return cleaned

##########################
#  –ß–ê–°–¢–¨ 1. –û–ü–†–û–° (POLL)
##########################

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–æ—Å–∞ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã)
def init_group_data() -> Dict[str, Any]:
    return {
        "office": {},
        "wanted_cuisines": defaultdict(set),
        "food_restrictions": defaultdict(set),
        "price_limit": {},
        "walk_time": {},
        "all_users": set(),
        "positive": "",
        "negative": ""
    }


# –ö–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–¥—å–±—ã –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
BUDGET_MAP = {
    "üíµ –î–æ 500 —Ä—É–±.": 500,
    "üíµ –î–æ 1000 —Ä—É–±.": 1000,
    "üíµ –î–æ 1500 —Ä—É–±.": 1500,
    "üíµ –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": 999999
}
WALK_TIME_MAP = {
    "üö∂ –î–æ 5 –º–∏–Ω—É—Ç": 5,
    "üö∂ –î–æ 10 –º–∏–Ω—É—Ç": 10,
    "üö∂ –î–æ 15 –º–∏–Ω—É—Ç": 15
}

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞
office_options = ["–ø–µ—Ä. –í–∏–ª–µ–Ω—Å–∫–∏–π, 14–ê", "–î–µ–≥—Ç—è—Ä–Ω—ã–π –ø–µ—Ä., 11–ë", "–ö–∏–µ–≤—Å–∫–∞—è —É–ª., 5 –∫–æ—Ä–ø. 4"]
cuisine_options = ["üç≤ –†—É—Å—Å–∫–∞—è", "üçΩÔ∏è –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "üçú –ê–∑–∏–∞—Ç—Å–∫–∞—è", "üçî –§–∞—Å—Ç—Ñ—É–¥", "üè¢ –ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á"]
restriction_options = [
    "ü•ó –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞",
    "üå± –ü–æ—Å—Ç–Ω–æ–µ –º–µ–Ω—é",
    "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
]
budget_options = ["üíµ –î–æ 500 —Ä—É–±.", "üíµ –î–æ 1000 —Ä—É–±.", "üíµ –î–æ 1500 —Ä—É–±.", "üíµ –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
walk_time_options = ["üö∂ –î–æ 5 –º–∏–Ω—É—Ç", "üö∂ –î–æ 10 –º–∏–Ω—É—Ç", "üö∂ –î–æ 15 –º–∏–Ω—É—Ç"]

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –õ–°)
# –ó–¥–µ—Å—å ¬´office¬ª –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö ‚Äì –∏—Ö –æ–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫—É—Ö–Ω–∏
state_settings = {
    "cuisine": {
        "text": "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫—É—Ö–Ω—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        "options": cuisine_options,
        "prefix": "cuisine",
        "next_state": "restrictions",
        "type": "multi"
    },
    "restrictions": {
        "text": "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å):",
        "options": restriction_options,
        "prefix": "restrictions",
        "next_state": "budget",
        "prev_state": "cuisine",
        "type": "multi"
    },
    "budget": {
        "text": "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:",
        "options": budget_options,
        "prefix": "budget",
        "next_state": "walk_time",
        "prev_state": "restrictions",
        "type": "single"
    },
    "walk_time": {
        "text": "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏:",
        "options": walk_time_options,
        "prefix": "walkTime",
        "next_state": "finish",
        "prev_state": "budget",
        "type": "single"
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞ –≤ –≥—Ä—É–ø–ø–µ (–¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞)
group_office_state = {
    "text": "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:",
    "options": office_options,
    "prefix": "groupOffice",
    "next_state": "invite",  # —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø ‚Äì –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    "type": "single"
}

def create_inline_keyboard(options, prefix, selected_values: Set[str], next_step=None, prev_step=None) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    keyboard = []
    for i, option in enumerate(options):
        display_text = f"‚úÖ {option}" if option in selected_values else option
        keyboard.append([InlineKeyboardButton(display_text, callback_data=f"{prefix}_{i}")])
    
    nav_buttons = []
    if prev_step:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{prev_step}"))
    if next_step:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{next_step}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(keyboard)

def get_selected_values(state: str, user_id: int, group_data: dict) -> Set[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if state == "budget":
        value = group_data["price_limit"].get(user_id)
        return {value} if value else set()
    elif state == "walk_time":
        value = group_data["walk_time"].get(user_id)
        return {value} if value else set()
    elif state == "cuisine":
        return {option for option, users in group_data["wanted_cuisines"].items() if user_id in users}
    elif state == "restrictions":
        return {option for option, users in group_data["food_restrictions"].items() if user_id in users}
    return set()

# –ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–±—Ä–æ—Å–∞ –æ—Ç–≤–µ—Ç–æ–≤ ‚Äì –¥–ª—è –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ñ–∏—Å (–µ—Å–ª–∏ –æ–Ω–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)
def reset_user_answers(user_id: int, group_data: dict, skip_office=False):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞).
    """
    if not skip_office:
        group_data["office"].pop(user_id, None)
    group_data["price_limit"].pop(user_id, None)
    group_data["walk_time"].pop(user_id, None)

    for field in ["wanted_cuisines", "food_restrictions"]:
        for option in list(group_data[field].keys()):
            group_data[field][option].discard(user_id)
            if len(group_data[field][option]) == 0:
                del group_data[field][option]

    group_data["all_users"].add(user_id)

# –û–±—ã—á–Ω—ã–π poll_callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–æ–≤ –≤ –õ–°
async def poll_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–æ—Å–∞ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –õ–°).
    """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    group_id = context.user_data.get("group_id")
    if not group_id:
        logging.error("Poll callback: group_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
        await query.answer("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.")
        return

    group_data = context.bot_data.get("group_answers", {}).get(group_id)
    if not group_data:
        logging.error("Poll callback: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã %s –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", group_id)
        await query.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    group_data["all_users"].add(user_id)

    data = query.data
    if data.startswith("next_"):
        next_state = data.split("_", 1)[1]
        await handle_next(query, next_state, user_id, group_data, context)
    elif data.startswith("prev_"):
        prev_state = data.split("_", 1)[1]
        await handle_prev(query, prev_state, user_id, group_data, context)
    else:
        try:
            prefix, index_str = data.split("_", 1)
            option_index = int(index_str)
        except (ValueError, IndexError):
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
        state = None
        for key, stg in state_settings.items():
            if stg["prefix"] == prefix:
                state = key
                break
        if not state:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø!")
            return

        await handle_selection(query, state, option_index, user_id, group_data)

async def handle_selection(update_query, state: str, option_index: int, user_id: int, group_data: dict):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —ç—Ç–∞–ø–∞ –æ–ø—Ä–æ—Å–∞ (–¥–ª—è –õ–°).
    """
    settings = state_settings[state]
    option = settings["options"][option_index]

    if settings["type"] == "single":
        if state == "budget":
            group_data["price_limit"][user_id] = option
        elif state == "walk_time":
            group_data["walk_time"][user_id] = option

        selected = get_selected_values(state, user_id, group_data)
        await update_query.edit_message_reply_markup(
            create_inline_keyboard(settings["options"], settings["prefix"], selected,
                                     next_step=settings.get("next_state"),
                                     prev_step=settings.get("prev_state"))
        )
    else:
        if state == "restrictions":
            if option == "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
                for opt in list(group_data["food_restrictions"].keys()):
                    if user_id in group_data["food_restrictions"][opt]:
                        group_data["food_restrictions"][opt].remove(user_id)
                        if len(group_data["food_restrictions"][opt]) == 0:
                            del group_data["food_restrictions"][opt]
                if "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" not in group_data["food_restrictions"]:
                    group_data["food_restrictions"]["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"] = set()
                group_data["food_restrictions"]["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"].add(user_id)
            else:
                if "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" in group_data["food_restrictions"]:
                    group_data["food_restrictions"]["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"].discard(user_id)
                    if len(group_data["food_restrictions"]["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"]) == 0:
                        del group_data["food_restrictions"]["–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"]

                if option not in group_data["food_restrictions"]:
                    group_data["food_restrictions"][option] = set()

                if user_id in group_data["food_restrictions"][option]:
                    group_data["food_restrictions"][option].remove(user_id)
                    if len(group_data["food_restrictions"][option]) == 0:
                        del group_data["food_restrictions"][option]
                else:
                    group_data["food_restrictions"][option].add(user_id)

        elif state == "cuisine":
            if option not in group_data["wanted_cuisines"]:
                group_data["wanted_cuisines"][option] = set()

            if user_id in group_data["wanted_cuisines"][option]:
                group_data["wanted_cuisines"][option].remove(user_id)
                if len(group_data["wanted_cuisines"][option]) == 0:
                    del group_data["wanted_cuisines"][option]
            else:
                group_data["wanted_cuisines"][option].add(user_id)

        selected = get_selected_values(state, user_id, group_data)
        await update_query.edit_message_reply_markup(
            create_inline_keyboard(settings["options"], settings["prefix"], selected,
                                     next_step=settings.get("next_state"),
                                     prev_step=settings.get("prev_state"))
        )

async def handle_next(update_query, next_state: str, user_id: int, group_data: dict, context: ContextTypes.DEFAULT_TYPE):
    await show_state(update_query, next_state, user_id, group_data, context)

async def handle_prev(update_query, prev_state: str, user_id: int, group_data: dict, context: ContextTypes.DEFAULT_TYPE):
    await show_state(update_query, prev_state, user_id, group_data, context)

async def show_state(query, state: str, user_id: int, group_data: dict, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –æ–ø—Ä–æ—Å–∞ (–≤ –õ–°).
    –ü—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "finish" –≤—ã–≤–æ–¥–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π.
    """
    if state == "finish":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–µ –±–ª—é–¥–∞/–∫—É—Ö–Ω–∏", callback_data="free_form_positive")]
        ])
        await query.edit_message_text(
            "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–ª—é–¥–∞/–∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ –ª—é–±–∏—Ç–µ:",
            reply_markup=keyboard
        )
        return

    settings = state_settings[state]
    text = settings["text"]
    options = settings["options"]
    prefix = settings["prefix"]
    next_state = settings.get("next_state")
    prev_state = settings.get("prev_state")
    selected = get_selected_values(state, user_id, group_data)
    reply_markup = create_inline_keyboard(options, prefix, selected, next_step=next_state, prev_step=prev_state)
    await query.edit_message_text(text, reply_markup=reply_markup)

def calculate_set_distribution(votes_dict, total_users):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–≤–∞—Ä–∏–∞–Ω—Ç: –¥–æ–ª—è} –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –≥–æ–ª–æ—Å–æ–º.
    """
    result = {}
    for option, users_set in votes_dict.items():
        if len(users_set) > 0:
            result[option] = round(len(users_set) / total_users, 2)
    return result

def calculate_single_distribution(single_dict, total_users):
    from collections import defaultdict
    counts = defaultdict(int)
    for ans in single_dict.values():
        counts[ans] += 1
    result = {}
    for option, count in counts.items():
        result[option] = round(count / total_users, 2)
    return result

def send_to_recommendation_module(user_answers: dict) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    """
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –º–æ–¥—É–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: %s", user_answers)
    # –ó–î–ï–°–¨ –ú–û–ñ–ù–û –°–î–ï–õ–ê–¢–¨ –í–´–ó–û–í –†–ï–ê–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò –ò–ó –ú–û–î–£–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô, –ù–ê–ü–†–ò–ú–ï–†:
    # return recommendation_module.get_recommendations(user_answers)
    return "–ó–∞–≥–ª—É—à–∫–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã."
    # return requests.post(url='http://127.0.0.1:5002/recommendations', json=user_answers).json()

# –¢–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –±–µ–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –æ—Ñ–∏—Å–∞–º ‚Äì –æ—Ñ–∏—Å –±–µ—Ä—ë—Ç—Å—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
def get_user_answers(group_data: dict, invitation: dict = None) -> dict:
    total_users = len(group_data["all_users"])
    if total_users == 0:
        return {}

    wanted_cuisines_dist = calculate_set_distribution(group_data["wanted_cuisines"], total_users)
    food_restrictions_dist = calculate_set_distribution(group_data["food_restrictions"], total_users)
    walk_time_dist = calculate_single_distribution(group_data["walk_time"], total_users)
    budget_dist = calculate_single_distribution(group_data["price_limit"], total_users)

    numeric_walk_time_dist = {WALK_TIME_MAP.get(option, option): val for option, val in walk_time_dist.items()}
    numeric_budget_dist = {BUDGET_MAP.get(option, option): val for option, val in budget_dist.items()}

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–∏—Å, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º
    if invitation:
        organizer_id = invitation.get("organizer_id")
        chosen_office = group_data["office"].get(organizer_id, "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    else:
        chosen_office = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    user_answers = {
        "office": chosen_office,
        "wanted_cuisines": wanted_cuisines_dist,
        "food_restrictions": food_restrictions_dist,
        "price_limit": numeric_budget_dist,
        "walk_time": numeric_walk_time_dist,
        "positive": group_data.get("positive", "").replace("\n", " "),
        "negative": group_data.get("negative", "").replace("\n", " "),
    }
    return clean_dict_keys(user_answers)

# –í –∫–æ–º–∞–Ω–¥–µ /pollresults –¥–ª—è –≥—Ä—É–ø–ø—ã –≤—ã–≤–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –æ—Ñ–∏—Å
async def poll_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /pollresults ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å user_answers –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –º–æ–¥—É–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.
    """
    if update.effective_chat.type == "private":
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ /pollresults –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return

    group_id = update.effective_chat.id
    group_data = context.bot_data.get("group_answers", {}).get(group_id)
    if not group_data:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.")
        return

    user_answers = get_user_answers(group_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invitation = get_invitation(group_id, context.bot_data)
    # –ü–µ—Ä–µ–¥–∞—ë–º invitation –≤ get_user_answers
    user_answers = get_user_answers(group_data, invitation)

    summary = (
        "üìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:\n\n"
        f"1Ô∏è‚É£ –û—Ñ–∏—Å: {user_answers.get('office')}\n\n"
        "2Ô∏è‚É£ –ñ–µ–ª–∞–µ–º–∞—è –∫—É—Ö–Ω—è:\n" + "\n".join([f"{k}: {v}" for k, v in user_answers.get("wanted_cuisines", {}).items()]) + "\n\n"
        "3Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n" + "\n".join([f"{k}: {v}" for k, v in user_answers.get("food_restrictions", {}).items()]) + "\n\n"
        "4Ô∏è‚É£ –ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:\n" + "\n".join([f"{k}: {v}" for k, v in user_answers.get("price_limit", {}).items()]) + "\n\n"
        "5Ô∏è‚É£ –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:\n" + "\n".join([f"{k}: {v}" for k, v in user_answers.get("walk_time", {}).items()]) + "\n\n"
        "user_answers = " + json.dumps(user_answers, ensure_ascii=False) + "\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {send_to_recommendation_module(user_answers)}"
    )

    await update.message.reply_text(summary)

##########################
#  –ß–ê–°–¢–¨ 2. –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï
##########################

def get_group_members(chat_id, bot_data):
    if "group_members" not in bot_data:
        bot_data["group_members"] = {}
    return bot_data["group_members"].setdefault(chat_id, {})

def get_invitation(chat_id, bot_data):
    if "invitations" not in bot_data:
        bot_data["invitations"] = {}
    return bot_data["invitations"].get(chat_id)

def set_invitation(chat_id, invitation, bot_data):
    if "invitations" not in bot_data:
        bot_data["invitations"] = {}
    bot_data["invitations"][chat_id] = invitation

def create_invitation_keyboard(chat_id, bot_data):
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
    """
    members = get_group_members(chat_id, bot_data)
    invitation = get_invitation(chat_id, bot_data)
    keyboard = []
    for user_id, name in members.items():
        text = f"‚úÖ {name}" if user_id in invitation["invitees"] else name
        keyboard.append([InlineKeyboardButton(text, callback_data=f"invite_{user_id}")])
    keyboard.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="invite_next")])
    return InlineKeyboardMarkup(keyboard)

def create_response_keyboard(group_id):
    """
    –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –õ–°.
    """
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"response_{group_id}_accept"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"response_{group_id}_decline")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /join –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /join ‚Äì —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.
    """
    chat = update.effective_chat
    if chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    user = update.effective_user
    members = get_group_members(chat.id, context.bot_data)
    members[user.id] = user.full_name
    await update.message.reply_text(f"{user.full_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")

# –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–ø–µ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –æ—Ñ–∏—Å,
# –∞ –∑–∞—Ç–µ–º –≤—ã–±–∏—Ä–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
async def group_start_invitation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    organizer = update.effective_user
    members = get_group_members(chat.id, context.bot_data)
    members[organizer.id] = organizer.full_name

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    if "group_answers" not in context.bot_data:
        context.bot_data["group_answers"] = {}
    if chat.id not in context.bot_data["group_answers"]:
        context.bot_data["group_answers"][chat.id] = init_group_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É –≤ –≥—Ä—É–ø–ø—É –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ñ–∏—Å—É
    text = group_office_state["text"]
    reply_markup = create_inline_keyboard(group_office_state["options"], group_office_state["prefix"], set())
    await update.message.reply_text(text, reply_markup=reply_markup)

# –ù–æ–≤—ã–π callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ
async def group_office_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat = update.effective_chat  # –≥—Ä—É–ø–ø–∞
    user_id = query.from_user.id

    try:
        prefix, index_str = query.data.split("_", 1)
        option_index = int(index_str)
    except Exception:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        return

    if prefix != "groupOffice":
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        return

    group_id = chat.id
    if group_id not in context.bot_data.get("group_answers", {}):
        context.bot_data["group_answers"][group_id] = init_group_data()
    group_data = context.bot_data["group_answers"][group_id]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    option = group_office_state["options"][option_index]
    group_data["office"][user_id] = option

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    invitation = {
        "organizer_id": user_id,
        "organizer_username": query.from_user.full_name,
        "invitees": set(),
        "responses": {}  # —Å—Ç–∞—Ç—É—Å—ã: "pending", "accepted", "declined"
    }
    set_invitation(group_id, invitation, context.bot_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    reply_markup = create_invitation_keyboard(group_id, context.bot_data)
    await query.edit_message_text(
        f"{query.from_user.full_name}, –≤–∞—à –æ—Ñ–∏—Å –≤—ã–±—Ä–∞–Ω: {option}.\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ –æ–±–µ–¥:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async def invitation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
    """
    query = update.callback_query
    await query.answer()
    chat = update.effective_chat  # –≥—Ä—É–ø–ø–∞
    data = query.data
    invitation = get_invitation(chat.id, context.bot_data)
    if not invitation:
        await query.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if data.startswith("invite_") and data != "invite_next":
        try:
            user_id = int(data.split("_")[1])
        except ValueError:
            await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return
        if user_id in invitation["invitees"]:
            invitation["invitees"].remove(user_id)
        else:
            invitation["invitees"].add(user_id)
        reply_markup = create_invitation_keyboard(chat.id, context.bot_data)
        await query.edit_message_reply_markup(reply_markup=reply_markup)
    elif data == "invite_next":
        logging.info(f"invite_next pressed; invitees: {invitation['invitees']}")
        if not invitation["invitees"]:
            await query.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.", show_alert=True)
            return
        for uid in invitation["invitees"]:
            invitation["responses"][uid] = "pending"
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º
        for uid in invitation["invitees"]:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –æ–±–µ–¥ –∏–∑ –≥—Ä—É–ø–ø—ã \"{query.message.chat.title}\". –ü—Ä–∏–º–∏—Ç–µ –µ–≥–æ?",
                    reply_markup=create_response_keyboard(query.message.chat.id)
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

async def response_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –õ–°.
    """
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split("_")
    if len(parts) != 3:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    _, group_id_str, decision = parts
    try:
        group_id = int(group_id_str)
    except ValueError:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.")
        return
    invitation = get_invitation(group_id, context.bot_data)
    if not invitation:
        await query.edit_message_text("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–æ.")
        return
    user_id = query.from_user.id
    if user_id not in invitation["responses"]:
        await query.edit_message_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã.")
        return
    if decision == "accept":
        invitation["responses"][user_id] = "accepted"
        context.user_data["invitation_accepted"] = True
        context.user_data["group_id"] = group_id
        await query.edit_message_text("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±–µ–¥!\n–ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å...")
        await poll_start(update, context)
    elif decision == "decline":
        invitation["responses"][user_id] = "declined"
        await query.edit_message_text("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.")

async def invitation_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /invite_results ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ.
    """
    chat = update.effective_chat
    if chat.type not in ["group", "supergroup"]:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return
    invitation = get_invitation(chat.id, context.bot_data)
    if not invitation:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        return
    members = get_group_members(chat.id, context.bot_data)
    results_text = f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç {invitation['organizer_username']}:\n\n"
    for uid in invitation["invitees"]:
        name = members.get(uid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        status = invitation["responses"].get(uid, "pending")
        results_text += f"{name}: {status}\n"
    await update.message.reply_text(results_text)

##########################
#  –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ü–†–ò–í–ï–¢–°–¢–í–ò–ï (/hello)
##########################

async def hello_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–æ–º–∞–Ω–¥–∞ /hello ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞.
    """
    if update.effective_chat.type == "private":
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à LunchBuddy.\n\n"
            "–ß—Ç–æ–±—ã —è –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ, "
            "–≥–¥–µ —è –¥–æ–±–∞–≤–ª–µ–Ω. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /join."
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—É –°—Ç–∞—Ä—Ç "
            "–¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –æ—Ç –∫–æ–ª–ª–µ–≥"
        )

##########################
#  –û–ë–†–ê–ë–û–¢–ö–ê –°–í–û–ë–û–î–ù–û–ì–û –í–í–û–î–ê
##########################

def process_free_form_preference(free_text: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É free_text –≤ –º–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    """
    logging.info("–°–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: %s", free_text)
    return "–ó–∞–≥–ª—É—à–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞."

async def free_form_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return

    if not context.user_data.get("free_form_input_expected", False):
        return

    free_text = update.message.text
    group_id = context.user_data.get("group_id")
    if not group_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞.")
        return

    group_data = context.bot_data["group_answers"].get(group_id, {})
    mode = context.user_data.get("free_form_mode")

    if mode == "positive":
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ group_data["positive"]
        if group_data["positive"]:
            group_data["positive"] += "\n"
        group_data["positive"] += free_text

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´—Å–ø–∞—Å–∏–±–æ¬ª –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ ¬´–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ¬ª
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–µ–∂–µ–ª–∞–µ–º—ã–µ –±–ª—é–¥–∞/–∫—É—Ö–Ω–∏", callback_data="free_form_negative")]
        ])
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—á—Ç–µ–Ω—ã.\n"
            "–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–ª—é–¥–∞/–∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ª—é–±–∏—Ç–µ:",
            reply_markup=keyboard
        )

        # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
        context.user_data["free_form_input_expected"] = False
        context.user_data["free_form_mode"] = None

    elif mode == "negative":
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ group_data["negative"]
        if group_data["negative"]:
            group_data["negative"] += "\n"
        group_data["negative"] += free_text

        # 2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, —ç—Ç–æ —É—á—Ç–µ–Ω–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        context.user_data["free_form_input_expected"] = False
        context.user_data["free_form_mode"] = None




async def free_form_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    context.user_data["free_form_input_expected"] = True

    if data == "free_form_positive":
        context.user_data["free_form_mode"] = "positive"
        await query.edit_message_text("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–ª—é–¥–∞ –∏ –∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –æ—Å–æ–±–µ–Ω–Ω–æ –Ω—Ä–∞–≤—è—Ç—Å—è:")
    elif data == "free_form_negative":
        context.user_data["free_form_mode"] = "negative"
        await query.edit_message_text("–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –±–ª—é–¥–∞ –∏ –∫—É—Ö–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –í–∞–º –Ω–µ –ø–æ –≤–∫—É—Å—É:")
    else:
        context.user_data["free_form_input_expected"] = False
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


##########################
#  –ï–î–ò–ù–´–ô –í–•–û–î /START
##########################

# –ò–∑–º–µ–Ω—ë–Ω: –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –æ—Ñ–∏—Å–∞ (group_start_invitation)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ:
      - –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ;
      - –µ—Å–ª–∏ –ø—Ä–∏–Ω—è—Ç–æ ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å.
    –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ ‚Äì –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.
    """
    if update.effective_chat.type == "private":
        if not context.user_data.get("invitation_accepted", False):
            await hello_command(update, context)
            return
        await poll_start(update, context)
    else:
        await group_start_invitation(update, context)

# –ò–∑–º–µ–Ω—ë–Ω: –≤ –õ–° –æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —ç—Ç–∞–ø–∞ "cuisine" (–±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞ –æ–± –æ—Ñ–∏—Å–µ)
async def poll_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ context.user_data["group_id"].
    """
    if update.effective_chat.type != "private":
        await update.effective_message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.")
        return

    group_id = context.user_data.get("group_id")
    if not group_id:
        logging.error("Poll start: group_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—É.")
        return

    if "group_answers" not in context.bot_data:
        context.bot_data["group_answers"] = {}
    if group_id not in context.bot_data["group_answers"]:
        context.bot_data["group_answers"][group_id] = init_group_data()
    group_data = context.bot_data["group_answers"][group_id]
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ –æ—Ñ–∏—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
    invitation = get_invitation(group_id, context.bot_data)
    if invitation and invitation.get("organizer_id") == user_id:
        skip_office = True
    else:
        skip_office = False

    reset_user_answers(user_id, group_data, skip_office=skip_office)

    # –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å —ç—Ç–∞–ø–∞ "cuisine"
    initial_state = "cuisine"
    settings = state_settings[initial_state]
    text = settings["text"]
    reply_markup = create_inline_keyboard(
        settings["options"],
        settings["prefix"],
        get_selected_values(initial_state, user_id, group_data),
        next_step=settings.get("next_state"),
        prev_step=settings.get("prev_state")
    )
    if update.message:
        await update.message.reply_text(text, reply_markup=reply_markup)
    elif update.callback_query and update.callback_query.message:
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
    else:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞.")

##########################
#  –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
##########################

app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("hello", hello_command))
app.add_handler(CallbackQueryHandler(poll_callback, pattern=r"^(cuisine_|restrictions_|budget_|walkTime_|next_|prev_)"))
app.add_handler(CallbackQueryHandler(group_office_callback, pattern=r"^groupOffice_"))
app.add_handler(CommandHandler("pollresults", poll_results))
app.add_handler(CommandHandler("join", join))
app.add_handler(CallbackQueryHandler(invitation_callback, pattern=r"^(invite_|invite_next)"))
app.add_handler(CallbackQueryHandler(response_callback, pattern=r"^response_"))
app.add_handler(CallbackQueryHandler(free_form_callback, pattern=r"^free_form_(positive|negative)$"))
app.add_handler(CommandHandler("invite_results", invitation_results))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_form_handler))
app.run_polling()
