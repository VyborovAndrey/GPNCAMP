import os
from dotenv import load_dotenv
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)
from collections import defaultdict

load_dotenv()
TOKEN = os.getenv("TOKEN")

# –≠—Ç–∞–ø—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
OFFICE, CUISINE, RESTRICTIONS, BUDGET, WALK_TIME = range(5)

# –ö–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ —á–∏—Å–ª–∞ (–¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è)
BUDGET_MAP = {
    "üíµ –î–æ 500 —Ä—É–±.": 500,
    "üíµ –î–æ 1000 —Ä—É–±.": 1000,
    "üíµ –î–æ 1500 —Ä—É–±.": 1500,
    "üíµ –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã": 999999  # —É—Å–ª–æ–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}
WALK_TIME_MAP = {
    "üö∂ –î–æ 5 –º–∏–Ω—É—Ç": 5,
    "üö∂ –î–æ 10 –º–∏–Ω—É—Ç": 10,
    "üö∂ –î–æ 15 –º–∏–Ω—É—Ç": 15
}

def init_group_data():
    """
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞.
    –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–∏–º –≤—ã–±–æ—Ä–æ–º (–æ—Ñ–∏—Å, –±—é–¥–∂–µ—Ç) –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏:
      user_id -> –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
    –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–∫—É—Ö–Ω—è, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –≤—Ä–µ–º—è) ‚Äì defaultdict(set).
    """
    return {
        "office": {},           # {user_id: –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å}
        "wanted_cuisines": defaultdict(set),  # {–≤–∞—Ä–∏–∞–Ω—Ç: {user_id1, user_id2, ...}}
        "food_restrictions": defaultdict(set),
        "price_limit": {},      # {user_id: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–µ–∫}
        "walk_time": defaultdict(set),
        "all_users": set()      # –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    }

def create_inline_keyboard(options, prefix, selected_values, next_step=None, prev_step=None):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
      options     - —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (—Å—Ç—Ä–æ–∫)
      prefix      - –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "office")
      selected_values - –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–¥–ª—è –º–Ω–æ–≥–æ-–≤—ã–±–æ—Ä–∞) 
                         –∏–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞)
      next_step   - –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "‚û°Ô∏è –î–∞–ª–µ–µ" —Å callback_data "next_{next_step}"
      prev_step   - –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" —Å callback_data "prev_{prev_step}"
    """
    keyboard = []
    for i, option in enumerate(options):
        mark = f"‚úÖ {option}" if option in selected_values else option
        keyboard.append([InlineKeyboardButton(mark, callback_data=f"{prefix}_{i}")])
    
    nav_buttons = []
    if prev_step:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_{prev_step}"))
    if next_step:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{next_step}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    return InlineKeyboardMarkup(keyboard)

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
office_options = ["–ø–µ—Ä. –í–∏–ª–µ–Ω—Å–∫–∏–π, 14–ê", "–î–µ–≥—Ç—è—Ä–Ω—ã–π –ø–µ—Ä., 11–ë", "–ö–∏–µ–≤—Å–∫–∞—è —É–ª., 5 –∫–æ—Ä–ø. 4"]
cuisine_options = ["üç≤ –†—É—Å—Å–∫–∞—è", "üçΩÔ∏è –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "üçú –ê–∑–∏–∞—Ç—Å–∫–∞—è", "üçî –§–∞—Å—Ç—Ñ—É–¥", "üè¢ –ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á", "üå± –ü–æ—Å—Ç–Ω–æ–µ –º–µ–Ω—é"]
restriction_options = [
    "ü•ó –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞",
    "üå± –í–µ–≥–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞",
    "ü•ú –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞ / –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ –æ—Ä–µ—Ö–∏",
    "üç≤ –•–∞–ª—è–ª—å / –ö–æ—à–µ—Ä–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
    "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
]
budget_options = ["üíµ –î–æ 500 —Ä—É–±.", "üíµ –î–æ 1000 —Ä—É–±.", "üíµ –î–æ 1500 —Ä—É–±.", "üíµ –ë–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã"]
walk_time_options = ["üö∂ –î–æ 5 –º–∏–Ω—É—Ç", "üö∂ –î–æ 10 –º–∏–Ω—É—Ç", "üö∂ –î–æ 15 –º–∏–Ω—É—Ç"]

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.bot_data["group_answers"] = init_group_data()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –≥–æ–ª–æ—Å—É—é—Ç –∑–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –¥–ª—è –æ–±–µ–¥–∞.\n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:",
        reply_markup=create_inline_keyboard(office_options, "office", set(), next_step="cuisine")
    )
    return OFFICE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    # –†–∞–∑–±–∏–≤–∞–µ–º callback_data –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–∏–º–≤–æ–ª—É '_'
    action, index = query.data.rsplit("_", 1)
    group_data = context.bot_data["group_answers"]
    group_data["all_users"].add(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥
    if action == "prev":
        if index == "office":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–∏—Å—É
            user_office = group_data["office"].get(user_id)
            selected = {user_office} if user_office else set()
            await query.edit_message_text(
                "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ñ–∏—Å:",
                reply_markup=create_inline_keyboard(office_options, "office", selected, next_step="cuisine")
            )
            return OFFICE
        elif index == "cuisine":
            selected = {c for c, users in group_data["wanted_cuisines"].items() if user_id in users}
            await query.edit_message_text(
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫—É—Ö–Ω—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=create_inline_keyboard(cuisine_options, "cuisine", selected, next_step="restrictions", prev_step="office")
            )
            return CUISINE
        elif index == "restrictions":
            selected = {r for r, users in group_data["food_restrictions"].items() if user_id in users}
            await query.edit_message_text(
                "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å):",
                reply_markup=create_inline_keyboard(restriction_options, "restrictions", selected, next_step="budget", prev_step="cuisine")
            )
            return RESTRICTIONS
        elif index == "budget":
            user_budget = group_data["price_limit"].get(user_id)
            selected = {user_budget} if user_budget else set()
            await query.edit_message_text(
                "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:",
                reply_markup=create_inline_keyboard(budget_options, "budget", selected, next_step="walk_time", prev_step="restrictions")
            )
            return BUDGET
        elif index == "walk_time":
            selected = {t for t, users in group_data["walk_time"].items() if user_id in users}
            await query.edit_message_text(
                "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
                reply_markup=create_inline_keyboard(walk_time_options, "walk_time", selected, next_step="finish", prev_step="budget")
            )
            return WALK_TIME

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    elif action == "office":
        selected_office = office_options[int(index)]
        group_data["office"][user_id] = selected_office
        await query.edit_message_text(
            f"‚úÖ –û—Ñ–∏—Å –≤—ã–±—Ä–∞–Ω: {selected_office}\n\n2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∫—É—Ö–Ω—é (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=create_inline_keyboard(cuisine_options, "cuisine", set(), next_step="restrictions", prev_step="office")
        )
        return CUISINE

    elif action == "cuisine":
        selected_cuisine = cuisine_options[int(index)]
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: –¥–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
        if user_id in group_data["wanted_cuisines"][selected_cuisine]:
            group_data["wanted_cuisines"][selected_cuisine].remove(user_id)
        else:
            group_data["wanted_cuisines"][selected_cuisine].add(user_id)
        selected = {c for c, users in group_data["wanted_cuisines"].items() if user_id in users}
        await query.edit_message_reply_markup(
            reply_markup=create_inline_keyboard(cuisine_options, "cuisine", selected, next_step="restrictions", prev_step="office")
        )

    elif action == "next" and index == "restrictions":
        await query.edit_message_text(
            "3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å):",
            reply_markup=create_inline_keyboard(restriction_options, "restrictions", set(), next_step="budget", prev_step="cuisine")
        )
        return RESTRICTIONS

    elif action == "restrictions":
        selected_restriction = restriction_options[int(index)]
        if user_id in group_data["food_restrictions"][selected_restriction]:
            group_data["food_restrictions"][selected_restriction].remove(user_id)
        else:
            group_data["food_restrictions"][selected_restriction].add(user_id)
        selected = {r for r, users in group_data["food_restrictions"].items() if user_id in users}
        await query.edit_message_reply_markup(
            reply_markup=create_inline_keyboard(restriction_options, "restrictions", selected, next_step="budget", prev_step="cuisine")
        )

    elif action == "next" and index == "budget":
        await query.edit_message_text(
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:",
            reply_markup=create_inline_keyboard(budget_options, "budget", set(), next_step="walk_time", prev_step="restrictions")
        )
        return BUDGET

    elif action == "budget":
        selected_budget = budget_options[int(index)]
        group_data["price_limit"][user_id] = selected_budget
        await query.edit_message_text(
            f"‚úÖ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤—ã–±—Ä–∞–Ω: {selected_budget}\n\n5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=create_inline_keyboard(walk_time_options, "walk_time", set(), next_step="finish", prev_step="budget")
        )
        return WALK_TIME

    elif action == "walk_time":
        selected_walk_time = walk_time_options[int(index)]
        if user_id in group_data["walk_time"][selected_walk_time]:
            group_data["walk_time"][selected_walk_time].remove(user_id)
        else:
            group_data["walk_time"][selected_walk_time].add(user_id)
        selected = {t for t, users in group_data["walk_time"].items() if user_id in users}
        await query.edit_message_reply_markup(
            reply_markup=create_inline_keyboard(walk_time_options, "walk_time", selected, next_step="finish", prev_step="budget")
        )

    elif action == "next" and index == "finish":
        await query.edit_message_text("–ì–æ—Ç–æ–≤–æ! –í–≤–µ–¥–∏—Ç–µ /results, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤.")
        return

    await query.answer()

# –ö–æ–º–∞–Ω–¥–∞ /results ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –∏ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å user_answers
async def results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group_data = context.bot_data.get("group_answers", init_group_data())
    total_users = len(group_data["all_users"])
    if total_users == 0:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.")
        return

    def calculate_set_distribution(votes_dict):
        result = {}
        for option, users_set in votes_dict.items():
            count = len(users_set)
            result[option] = round(count / total_users, 2)
        return result

    def calculate_single_distribution(single_dict):
        counts = defaultdict(int)
        for ans in single_dict.values():
            counts[ans] += 1
        result = {}
        for option, count in counts.items():
            result[option] = round(count / total_users, 2)
        return result

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    wanted_cuisines_dist = calculate_set_distribution(group_data["wanted_cuisines"])
    food_restrictions_dist = calculate_set_distribution(group_data["food_restrictions"])
    walk_time_dist = calculate_set_distribution(group_data["walk_time"])
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–∏–º –≤—ã–±–æ—Ä–æ–º
    office_dist = calculate_single_distribution(group_data["office"])
    budget_dist = calculate_single_distribution(group_data["price_limit"])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å (–Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö)
    chosen_office = max(office_dist, key=office_dist.get, default="–ù–µ –≤—ã–±—Ä–∞–Ω–æ")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±—é–¥–∂–µ—Ç –∏ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
    numeric_budget_dist = {}
    for option_str, weight in budget_dist.items():
        if option_str in BUDGET_MAP:
            numeric_budget_dist[BUDGET_MAP[option_str]] = weight
        else:
            numeric_budget_dist[option_str] = weight

    numeric_walk_time_dist = {}
    for option_str, weight in walk_time_dist.items():
        if option_str in WALK_TIME_MAP:
            numeric_walk_time_dist[WALK_TIME_MAP[option_str]] = weight
        else:
            numeric_walk_time_dist[option_str] = weight

    # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
    cleaned_food_restrictions = {
        k: v for k, v in food_restrictions_dist.items() if k != "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π" and v > 0
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å user_answers
    user_answers = {
        "wanted_cuisines": wanted_cuisines_dist,
        "price_limit": numeric_budget_dist,
        "food_restrictions": cleaned_food_restrictions,
        "walk_time": numeric_walk_time_dist
    }

    summary = (
        "üìä –ò—Ç–æ–≥–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:\n\n"
        f"1Ô∏è‚É£ –û—Ñ–∏—Å (–º–∞–∫—Å–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤): {chosen_office}\n\n"
        "2Ô∏è‚É£ –ñ–µ–ª–∞–µ–º–∞—è –∫—É—Ö–Ω—è:\n" + "\n".join([f"{k}: {v}" for k, v in wanted_cuisines_dist.items()]) + "\n\n"
        "3Ô∏è‚É£ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n" + "\n".join([f"{k}: {v}" for k, v in food_restrictions_dist.items()]) + "\n\n"
        "4Ô∏è‚É£ –ñ–µ–ª–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫:\n" + "\n".join([f"{k}: {v}" for k, v in budget_dist.items()]) + "\n\n"
        "5Ô∏è‚É£ –í—Ä–µ–º—è –≤ –ø—É—Ç–∏:\n" + "\n".join([f"{k}: {v}" for k, v in walk_time_dist.items()])
    )

    final_message = (
        summary +
        "\n\n" +
        "user_answers = {\n"
        f'    "wanted_cuisines": {wanted_cuisines_dist},\n'
        f'    "price_limit": {numeric_budget_dist},\n'
        f'    "food_restrictions": {cleaned_food_restrictions},\n'
        f'    "walk_time": {numeric_walk_time_dist}\n'
        "}"
    )

    await update.message.reply_text(final_message)

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(CommandHandler("results", results))
app.run_polling()
