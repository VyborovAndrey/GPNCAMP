from flask import Flask, request, jsonify
import pandas as pd
import requests
from io import StringIO
# –ú–æ–¥–µ–ª—å –≤–µ—Å–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤–æ—à–ª–∞
# from processing_requests import FoodAnalyzer
app = Flask(__name__)

# –ü–æ–∫–∞ –Ω–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–µ—Ç –±–æ–ª—å—à–æ–≥–æ —Å–º—ã—Å–ª–∞ —Å–º—ã—Å–ª–∞ –æ—Ç –ë–î, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≥—Ä—É–∑–∏–º –≤—Å—é –∏–Ω—Ñ—É –≤ –ø–∞–º—è—Ç—å.
# –ï—Å–ª–∏ –±—É–¥–µ—Ç –∞–≤—Ç–æ–ø–∞—Ä—Å–µ—Ä, —Ç–æ —É–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ 
df_office_1 = pd.read_csv('office1.csv')
df_office_2 = pd.read_csv('office2.csv')
df_office_3 = pd.read_csv('office3.csv')

@app.route('/get_data', methods=['POST'])
def get_data():
    global df_office_1
    global df_office_2
    global df_office_3
    try:
        office_1 = requests.get(url='http://127.0.0.1:5000/get_office_1').text
        csv_file = StringIO(office_1)
        df_office_1 = pd.read_csv(csv_file)
        df_office_1 = df_office_1.rename(columns={'office_1_time': 'office_time'})
        office_2 = requests.get(url='http://127.0.0.1:5000/get_office_2').text
        csv_file = StringIO(office_2)
        df_office_2 = pd.read_csv(csv_file)
        df_office_2 = df_office_2.rename(columns={'office_2_time': 'office_time'})
        office_3 = requests.get(url='http://127.0.0.1:5000/get_office_3').text
        csv_file = StringIO(office_3)
        df_office_3 = pd.read_csv(csv_file)
        df_office_3 = df_office_3.rename(columns={'office_3_time': 'office_time'})
        return 200
    except:
        return 400


# analyzer = FoodAnalyzer(
#     model_path='models/request_processing/request_processing_model.pth',
#     cuisine_json_path='data/unique_cuisines.json',
#     dish_json_path='data/unique_dishes.json'
# )


# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—á–µ—Ç–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ –±–ª—é–¥–∞–º (–±–µ–∑ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –±–ª—é–¥–∞)
def adjust_score_by_dishes(row, structured_wishes):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –±–ª—é–¥–∞ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã.
    """
    menu = row["Dishes"] if "Dishes" in row and pd.notna(row["Dishes"]) else ""
    menu_items = [dish.strip().lower() for dish in menu.split(";")]  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –±–ª—é–¥

    positive_dish_bonus = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∂–µ–ª–∞–µ–º—ã–µ –±–ª—é–¥–∞ –≤ –º–µ–Ω—é
    for dish in structured_wishes["positive_dishes"]:
        if dish.lower() in menu_items:
            positive_dish_bonus += 0.1  # +0.5 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –ª—é–±–∏–º–æ–µ –±–ª—é–¥–æ

    return positive_dish_bonus

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—á–µ—Ç–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –∫—É—Ö–æ–Ω—å (–∏–∑ `Cuisine`) - –¥–æ–ø. –±–∞–ª–ª—ã –ø–æ structured_wishes
def adjust_cuisine_score(row, structured_wishes):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∫—É—Ö–Ω–∏ –≤ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –±–∞–ª–ª—ã.
    """
    cuisine_list = row["Cuisine"].split(";") if pd.notna(row["Cuisine"]) else []  # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫

    positive_cuisine_bonus = 0
    negative_cuisine_penalty = 0

    for cuisine in structured_wishes["positive_cuisines"]:
        if cuisine in cuisine_list:
            positive_cuisine_bonus += 0.2  # –£—Å–∏–ª–∏–≤–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –ª—é–±–∏–º—ã–µ –∫—É—Ö–Ω–∏

    for cuisine in structured_wishes["negative_cuisines"]:
        if cuisine in cuisine_list:
            negative_cuisine_penalty -= 0.4  # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ö–Ω–∏

    return positive_cuisine_bonus + negative_cuisine_penalty

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–ø–æ –æ–ø—Ä–æ—Å—É + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ structured_wishes)
def calculate_score(row, user_answers, structured_wishes):
    # üîπ 1. –ë–∞–ª–ª—ã –∑–∞ –∫—É—Ö–Ω—é (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–∞)
    cuisine_score = sum(
        user_answers["wanted_cuisines"].get(c, 0)*2 for c in user_answers["wanted_cuisines"] if row.get(c, False)
    )

    # üîπ 2. –ë–∞–ª–ª—ã –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–∞)
    restrictions_score = sum(
        user_answers["food_restrictions"].get(r, 0) * 1.5 for r in user_answers["food_restrictions"] if row.get(r, False)
    )

    # üîπ 3. –ë–∞–ª–ª—ã –∑–∞ —Ü–µ–Ω—É (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–∞)
    price = row["price_limit"]
    price_score = sum(
        user_answers["price_limit"].get(limit, 0) for limit in user_answers["price_limit"] if pd.notna(price) and price <= int(limit)
    )

    # üîπ 4. –ë–∞–ª–ª—ã –∑–∞ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–∞)
    walk_time = row["office_time"]
    walk_score = sum(
        user_answers["walk_time"].get(limit, 0) for limit in user_answers["walk_time"] if pd.notna(walk_time) and walk_time <= int(limit)
    )

    # üîπ 5. –ë–∞–ª–ª—ã –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã (–ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–ø—Ä–æ—Å–∞)
    rating = row["reviews_general_rating"]
    reviews = row["reviews_general_review_count"]
    rating_score = (1 if rating > 4.5 else 0) + (1 if reviews > 200 else 0)

    # # üîπ 6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ë–∞–ª–ª—ã –∑–∞ structured_wishes (–∫—É—Ö–Ω–∏ –∏ –±–ª—é–¥–∞)
    # structured_cuisine_score = adjust_cuisine_score(row, structured_wishes)
    # structured_dish_score = adjust_score_by_dishes(row, structured_wishes)

    # üîπ –û–±—â–∞—è —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤
    # total_score = (cuisine_score + restrictions_score + price_score +
    #                walk_score + rating_score + structured_cuisine_score + structured_dish_score)
    total_score = (cuisine_score + restrictions_score + price_score +
                   walk_score + rating_score)

    return total_score

# def user_wishes(user_wish):
#     result = analyzer.analyze(user_wish)
#     output_for_recommendation_system = {
#     'positive_cuisines': FoodAnalyzer.filter_words(result['cuisine_positive']),
#     'positive_dishes': FoodAnalyzer.filter_words(result['dish_positive']),
#     'negative_cuisines': FoodAnalyzer.filter_words(result['cuisine_negative']),
#     'negative_dishes': FoodAnalyzer.filter_words(result['dish_negative'])
#     }
#     return output_for_recommendation_system

@app.route('/recommendations', methods=['POST'])
def get_recommendation():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers = request.json
    if user_answers['office'] == "–ø–µ—Ä. –í–∏–ª–µ–Ω—Å–∫–∏–π, 14–ê":
        df = df_office_1
    elif user_answers['office'] == "–î–µ–≥—Ç—è—Ä–Ω—ã–π –ø–µ—Ä., 11–ë":
        df = df_office_2
    elif user_answers['office'] == "–ö–∏–µ–≤—Å–∫–∞—è —É–ª., 5 –∫–æ—Ä–ø. 4":
        df = df_office_3
    else:
        return '400, office with this name not found'
    # wished = user_wishes(user_answers['positive'])
    # not_wished = user_wishes(user_answers['negative'])
    # structured_wishes = {
    # key: list(set(wished.get(key, []) + not_wished.get(key, [])))
    # for key in wished.keys() | not_wished.keys()
    # }
    # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –±–∞–ª–ª–∞–º–∏
    df["total_score"] = df.apply(lambda row: calculate_score(row, user_answers, structured_wishes), axis=1)

    # üîπ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–ª–∞–º, –∑–∞—Ç–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –∑–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–∑—ã–≤–æ–≤
    df_sorted = df.sort_values(by=["total_score", "reviews_general_rating", "reviews_general_review_count"], 
                            ascending=[False, False, False])

    # üîπ –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    top_3_places = df_sorted.head(3)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
    result = list([list(top_3_places['name'].to_list()), list(top_3_places['id'].to_list())])
    return result

if __name__ == '__main__':
    app.run(debug=True, port=5005)